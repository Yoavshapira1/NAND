// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // De-Code the instruction
        Or (a=instruction[15], b=false, out=isCinstruction);
        Not (in=isCinstruction, out=isAinstruction);
        Or (a=instruction[12], b=false, out=imMload);
        Or (a=instruction[11], b=false, out=zx);
        Or (a=instruction[10], b=false, out=nx);
        Or (a=instruction[9], b=false, out=zy);
        Or (a=instruction[8], b=false, out=ny);
        Or (a=instruction[7], b=false, out=f);
        Or (a=instruction[6], b=false, out=no);
        Or (a=instruction[5], b=false, out=regAload);
        Or (a=instruction[4], b=false, out=regDload);
        Or (a=instruction[3], b=false, out=regMload);
        Or (a=instruction[2], b=false, out=lower);
        Or (a=instruction[1], b=false, out=eq);
        Or (a=instruction[0], b=false, out=greater);

        // Load A, if needed, either from the ALU or the instruction
        And (a=isCinstruction, b=regAload, out=regAtoALU);
        Mux16 (a=instruction, b=ALUoutput, sel=regAtoALU, out=MUx16First);
        Or (a=isAinstruction, b=regAload, out=Aload);
        Register (in=MUx16First, load=Aload, out=A);

        // Load M if needed
        Mux16 (a=A, b=inM, sel=imMload, out=Mux16Second);

        // Load D, if needed. either from the ALU of the
        And (a=isCinstruction, b=regDload, out=Dload);
        Register (in=ALUoutput, load=Dload, out=D);

        ALU (x=D, y=Mux16Second,
            zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
            out=ALUoutput, zr=zr, ng=ng);

        // PC & JMP Condition implementation
        And (a=lower, b=ng, out=L);
        And (a=eq, b=zr, out=E);
        Not (in=ng, out=NotNg);
        Not (in=zr, out=NotZr);
        And (a=NotZr, b=NotNg, out=pos);
        And (a=greater, b=pos, out=G);
        Or (a=L, b=E, out=LE);
        Or (a=LE, b=G, out=jmp);
        Not (in=jmp, out=inc);
        PC (in=A, load=jmp, inc=inc, reset=reset, out[0..14]=pc);

        Or16(a=ALUoutput, b=false, out=outM);
        Or16 (a=A, b=false, out[0..14]=addressM);
        And(a=regMload, b=isCinstruction, out=writeM);

}