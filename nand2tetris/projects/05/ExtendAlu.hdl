// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ALU(x=x ,y=y ,zx=instruction[5] ,nx=instruction[4] ,zy=instruction[3] ,ny=instruction[2] ,f=instruction[1]
                                        ,no=instruction[0] ,out=outR ,zr=zrR ,ng=ngR );
     ShiftLeft(in=x ,out=xShiftL);
     ShiftLeft(in=y ,out=yShiftL);
     ShiftRight(in=x ,out=xShiftR);
     ShiftRight(in=y ,out=yShiftR);
     Mux4Way16(a=yShiftR ,b=yShiftL ,c=xShiftR ,d=xShiftL ,sel[0]=instruction[5] ,sel[1]=instruction[4] ,out=outS );
     IsNegative16(in=outS,out=ngS);
     Or16Way(in=outS, out=tempzrS);
     Not(in=tempzrS, out=zrS);
     Mux16(a=outS ,b=outR ,sel=instruction[8] ,out=out );
     Mux(a=zrS ,b=zrR ,sel=instruction[8] ,out=zr );
     Mux(a=ngS ,b=ngR ,sel=instruction[8] ,out=ng );
}
