// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
           // De-Code the instruction
        Or (a=instruction[15], b=false, out=cType);
        Not (in=cType, out=aType);
        Or (a=instruction[12], b=false, out=inMload);
        Or (a=instruction[5], b=false, out=regAload);
        Or (a=instruction[4], b=false, out=regDload);
        Or (a=instruction[3], b=false, out=regMload);
        Or (a=instruction[2], b=false, out=lower);
        Or (a=instruction[1], b=false, out=eq);
        Or (a=instruction[0], b=false, out=greater);

        // Load A:
        // Load iff: load A register bit is 1, or this is A type instruction
        Or (a=aType, b=regAload, out=Aload);
        // If C type (operation) -> Choose ALU out
        // If A type (assertion) -> Choose the instruction itself
        Mux16 (a=instruction, b=ALUoutput, sel=cType, out=MUx16First);
        ARegister (in=MUx16First, load=Aload, out=A, out[0..14]=addressM);

        // Load M if this is an operation, and M should be the input
        And (a=cType, b=inMload, out=Mload);
        Mux16 (a=A, b=inM, sel=Mload, out=Mux16Second);

        // Load D, if needed, either from the ALU of the
        And (a=cType, b=regDload, out=Dload);
        DRegister (in=ALUoutput, load=Dload, out=D);

        ExtendAlu (x=D, y=Mux16Second, instruction=instruction[6..14],
                out=ALUoutput, out=outM, zr=zr, ng=ng);

        // PC & JMP Condition implementation
        And (a=lower, b=ng, out=L);
        And (a=eq, b=zr, out=E);
        Not (in=ng, out=NotNg);
        Not (in=zr, out=NotZr);
        And (a=NotZr, b=NotNg, out=pos);
        And (a=greater, b=pos, out=G);
        Or (a=L, b=E, out=LE);
        Or (a=LE, b=G, out=SatCond);
        And (a=cType, b=SatCond, out=jmp);
        Not (in=jmp, out=inc);
        PC (in=A, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
        And (a=regMload, b=cType, out=writeM);
}